{"ast":null,"code":"import { GET_COUNTRIES, GET_ACTIVITIES, GET_COUNTRY_ID, GET_POPULATION, FILTER_CONTINENT, FILTER_ACTIVITIES, FILTER_POPULATION } from \"./actions\";\nconst initialState = {\n  allCountries: [],\n  countries: [],\n  activities: [],\n  population: [],\n  detail: []\n};\nconst rootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case GET_COUNTRIES:\n      return {\n        ...state,\n        countries: action.payload,\n        allCountries: action.payload\n      };\n    case GET_ACTIVITIES:\n      return {\n        ...state,\n        activities: action.payload\n      };\n    case GET_POPULATION:\n      return {\n        ...state,\n        population: action.payload\n      };\n    case GET_COUNTRY_ID:\n      return {\n        ...state,\n        detail: action.payload\n      };\n    case FILTER_CONTINENT:\n      const allCountries = state.allCountries;\n      const filterByContinent = action.payload === 'All' ? allCountries : allCountries.filter(elem => elem.continent === action.payload);\n      return {\n        ...state,\n        countries: filterByContinent\n      };\n    case FILTER_ACTIVITIES:\n      //[{pais[{travel},{travel}]},{pais[{travel},{travel}]}] =>'travelName'\n      //tengo que filtrar los paises que tengan la actividad con el mismo nombre que ingresa (travelName)\n      const allCountries2 = state.allCountries;\n      const existe = (travels, travelName) => {\n        const hay = travels.filter(elem => elem.name === travelName);\n        let ret = false;\n        if (hay.length !== 0) {\n          ret = true;\n        }\n        return ret;\n      };\n      const filterCountriesTravel = action.payload === 'All' ? allCountries2 : allCountries2.filter(elem => existe(elem.travels, action.payload) === true);\n      return {\n        ...state,\n        countries: filterCountriesTravel\n      };\n    case FILTER_POPULATION:\n      const allCountries3 = state.allCountries;\n      const filterByPopulation = action.payload === 'All' ? allCountries3 : allCountries3.filter(elem => elem.population === action.payload);\n      return {\n        ...state,\n        countries: filterByPopulation,\n        allCountries: state.allCountries\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default rootReducer;","map":{"version":3,"names":["GET_COUNTRIES","GET_ACTIVITIES","GET_COUNTRY_ID","GET_POPULATION","FILTER_CONTINENT","FILTER_ACTIVITIES","FILTER_POPULATION","initialState","allCountries","countries","activities","population","detail","rootReducer","state","action","type","payload","filterByContinent","filter","elem","continent","allCountries2","existe","travels","travelName","hay","name","ret","length","filterCountriesTravel","allCountries3","filterByPopulation"],"sources":["/home/antoo/Documentos/Henry/PI/PI-Countries-main/client/src/redux/reducer.js"],"sourcesContent":["import {\n    GET_COUNTRIES,\n    GET_ACTIVITIES,\n    GET_COUNTRY_ID,\n    GET_POPULATION,\n    FILTER_CONTINENT,\n    FILTER_ACTIVITIES,\n    FILTER_POPULATION,\n} from \"./actions\";\n\n\n\nconst initialState = {\n    allCountries: [],\n    countries: [],\n    activities: [],\n    population: [],\n    detail: [],\n}\n\nconst rootReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case GET_COUNTRIES:\n            return {\n                ...state,\n                countries: action.payload,\n                allCountries: action.payload,\n            };\n        case GET_ACTIVITIES:\n            return {\n                ...state,\n                activities: action.payload,\n            }\n        case GET_POPULATION:\n            return {\n                ...state,\n                population:action.payload,\n            }\n        case GET_COUNTRY_ID:\n            return {\n                ...state,\n                detail: action.payload,\n            };\n        case FILTER_CONTINENT:\n            const allCountries = state.allCountries;\n            const filterByContinent = action.payload === 'All' ? allCountries : allCountries.filter(elem => elem.continent === action.payload);\n            return {\n                ...state,\n                countries: filterByContinent,\n            };\n        case FILTER_ACTIVITIES:\n\n            //[{pais[{travel},{travel}]},{pais[{travel},{travel}]}] =>'travelName'\n            //tengo que filtrar los paises que tengan la actividad con el mismo nombre que ingresa (travelName)\n            const allCountries2 = state.allCountries;\n            const existe = (travels, travelName) => {\n                const hay = travels.filter(elem => elem.name === travelName);\n                let ret = false;\n\n                if (hay.length !== 0) {\n                    ret = true;\n                }\n\n                return ret;\n            }\n            const filterCountriesTravel = action.payload === 'All' ? allCountries2 : allCountries2.filter(elem => existe(elem.travels, action.payload) === true);\n\n            return {\n                ...state,\n                countries: filterCountriesTravel,\n            }\n        case FILTER_POPULATION:\n            const allCountries3 = state.allCountries;\n            const filterByPopulation = action.payload === 'All' ? allCountries3 : allCountries3.filter(elem => elem.population === action.payload);\n            return {\n                ...state,\n                countries: filterByPopulation,\n                allCountries: state.allCountries,\n            }\n\n        default:\n            return { ...state };\n    }\n}\n\nexport default rootReducer;"],"mappings":"AAAA,SACIA,aAAa,EACbC,cAAc,EACdC,cAAc,EACdC,cAAc,EACdC,gBAAgB,EAChBC,iBAAiB,EACjBC,iBAAiB,QACd,WAAW;AAIlB,MAAMC,YAAY,GAAG;EACjBC,YAAY,EAAE,EAAE;EAChBC,SAAS,EAAE,EAAE;EACbC,UAAU,EAAE,EAAE;EACdC,UAAU,EAAE,EAAE;EACdC,MAAM,EAAE;AACZ,CAAC;AAED,MAAMC,WAAW,GAAG,YAAkC;EAAA,IAAjCC,KAAK,uEAAGP,YAAY;EAAA,IAAEQ,MAAM;EAC7C,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKhB,aAAa;MACd,OAAO;QACH,GAAGc,KAAK;QACRL,SAAS,EAAEM,MAAM,CAACE,OAAO;QACzBT,YAAY,EAAEO,MAAM,CAACE;MACzB,CAAC;IACL,KAAKhB,cAAc;MACf,OAAO;QACH,GAAGa,KAAK;QACRJ,UAAU,EAAEK,MAAM,CAACE;MACvB,CAAC;IACL,KAAKd,cAAc;MACf,OAAO;QACH,GAAGW,KAAK;QACRH,UAAU,EAACI,MAAM,CAACE;MACtB,CAAC;IACL,KAAKf,cAAc;MACf,OAAO;QACH,GAAGY,KAAK;QACRF,MAAM,EAAEG,MAAM,CAACE;MACnB,CAAC;IACL,KAAKb,gBAAgB;MACjB,MAAMI,YAAY,GAAGM,KAAK,CAACN,YAAY;MACvC,MAAMU,iBAAiB,GAAGH,MAAM,CAACE,OAAO,KAAK,KAAK,GAAGT,YAAY,GAAGA,YAAY,CAACW,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,SAAS,KAAKN,MAAM,CAACE,OAAO,CAAC;MAClI,OAAO;QACH,GAAGH,KAAK;QACRL,SAAS,EAAES;MACf,CAAC;IACL,KAAKb,iBAAiB;MAElB;MACA;MACA,MAAMiB,aAAa,GAAGR,KAAK,CAACN,YAAY;MACxC,MAAMe,MAAM,GAAG,CAACC,OAAO,EAAEC,UAAU,KAAK;QACpC,MAAMC,GAAG,GAAGF,OAAO,CAACL,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACO,IAAI,KAAKF,UAAU,CAAC;QAC5D,IAAIG,GAAG,GAAG,KAAK;QAEf,IAAIF,GAAG,CAACG,MAAM,KAAK,CAAC,EAAE;UAClBD,GAAG,GAAG,IAAI;QACd;QAEA,OAAOA,GAAG;MACd,CAAC;MACD,MAAME,qBAAqB,GAAGf,MAAM,CAACE,OAAO,KAAK,KAAK,GAAGK,aAAa,GAAGA,aAAa,CAACH,MAAM,CAACC,IAAI,IAAIG,MAAM,CAACH,IAAI,CAACI,OAAO,EAAET,MAAM,CAACE,OAAO,CAAC,KAAK,IAAI,CAAC;MAEpJ,OAAO;QACH,GAAGH,KAAK;QACRL,SAAS,EAAEqB;MACf,CAAC;IACL,KAAKxB,iBAAiB;MAClB,MAAMyB,aAAa,GAAGjB,KAAK,CAACN,YAAY;MACxC,MAAMwB,kBAAkB,GAAGjB,MAAM,CAACE,OAAO,KAAK,KAAK,GAAGc,aAAa,GAAGA,aAAa,CAACZ,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACT,UAAU,KAAKI,MAAM,CAACE,OAAO,CAAC;MACtI,OAAO;QACH,GAAGH,KAAK;QACRL,SAAS,EAAEuB,kBAAkB;QAC7BxB,YAAY,EAAEM,KAAK,CAACN;MACxB,CAAC;IAEL;MACI,OAAO;QAAE,GAAGM;MAAM,CAAC;EAAC;AAEhC,CAAC;AAED,eAAeD,WAAW"},"metadata":{},"sourceType":"module"}
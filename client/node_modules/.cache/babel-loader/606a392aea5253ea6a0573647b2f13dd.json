{"ast":null,"code":"import { GET_COUNTRIES,\n// GET_ACTIVITIES,\nGET_COUNTRY_ID, FILTER_CONTINENT\n// FILTER_ACTIVITIES,\n} from \"./actions\";\nconst initialState = {\n  allCountries: [],\n  countries: [],\n  // activities: [],\n  detail: []\n};\nconst rootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case GET_COUNTRIES:\n      return {\n        ...state,\n        countries: action.payload,\n        allCountries: action.payload\n      };\n    /*    case GET_ACTIVITIES:\n            return{\n                ...state,\n                activities:action.payload,\n            } */\n    case GET_COUNTRY_ID:\n      return {\n        ...state,\n        detail: action.payload\n      };\n    case FILTER_CONTINENT:\n      const allCountries = state.allCountries;\n      const filterByContinent = action.payload === 'All' ? allCountries : allCountries.filter(elem => elem.continent === action.payload);\n      return {\n        ...state,\n        countries: filterByContinent\n      };\n    /* case FILTER_ACTIVITIES:\n         \n         //[{pais[{travel},{travel}]},{pais[{travel},{travel}]}] =>'travelName'\n         //tengo que filtrar los paises que tiengan la actividad con el mismo nombre que ingresa (travelName)\n         const allCountries2= state.allCountries;\n         const existe = (travels, travelName) =>{\n             const hay=travels.filter(elem=>elem.name === travelName);\n             let ret=false;\n              if(hay.length !== 0){\n                 ret=true;\n             }\n              return ret;\n         }\n         const filterCountriesTravel= action.payload==='All' ? allCountries2 : allCountries2.filter(elem=> existe(elem.travels,action.payload)===true);\n         \n         return{\n             ...state,\n             countries: filterCountriesTravel,\n         }\n    */\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default rootReducer;","map":{"version":3,"names":["GET_COUNTRIES","GET_COUNTRY_ID","FILTER_CONTINENT","initialState","allCountries","countries","detail","rootReducer","state","action","type","payload","filterByContinent","filter","elem","continent"],"sources":["/home/antoo/Documentos/Henry/PI/PI-Countries-main/client/src/redux/reducer.js"],"sourcesContent":["import {\n    GET_COUNTRIES,\n   // GET_ACTIVITIES,\n    GET_COUNTRY_ID,\n    FILTER_CONTINENT,\n   // FILTER_ACTIVITIES,\n} from \"./actions\";\n\n\n\nconst initialState = {\n    allCountries: [],\n    countries: [],\n   // activities: [],\n    detail: [],\n}\n\nconst rootReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case GET_COUNTRIES:\n            return {\n                ...state,\n                countries: action.payload,\n                allCountries: action.payload,\n            };\n        /*    case GET_ACTIVITIES:\n                return{\n                    ...state,\n                    activities:action.payload,\n                } */\n        case GET_COUNTRY_ID:\n            return {\n                ...state,\n                detail: action.payload,\n            };\n        case FILTER_CONTINENT:\n            const allCountries= state.allCountries;\n            const filterByContinent= action.payload==='All' ? allCountries : allCountries.filter(elem=> elem.continent === action.payload);\n            return {\n                ...state,\n                countries: filterByContinent,\n            };\n           /* case FILTER_ACTIVITIES:\n                \n                //[{pais[{travel},{travel}]},{pais[{travel},{travel}]}] =>'travelName'\n                //tengo que filtrar los paises que tiengan la actividad con el mismo nombre que ingresa (travelName)\n                const allCountries2= state.allCountries;\n                const existe = (travels, travelName) =>{\n                    const hay=travels.filter(elem=>elem.name === travelName);\n                    let ret=false;\n\n                    if(hay.length !== 0){\n                        ret=true;\n                    }\n\n                    return ret;\n                }\n                const filterCountriesTravel= action.payload==='All' ? allCountries2 : allCountries2.filter(elem=> existe(elem.travels,action.payload)===true);\n                \n                return{\n                    ...state,\n                    countries: filterCountriesTravel,\n                }\n*/\n        default:\n            return { ...state };\n    }\n}\n\nexport default rootReducer;"],"mappings":"AAAA,SACIA,aAAa;AACd;AACCC,cAAc,EACdC;AACD;AAAA,OACI,WAAW;AAIlB,MAAMC,YAAY,GAAG;EACjBC,YAAY,EAAE,EAAE;EAChBC,SAAS,EAAE,EAAE;EACd;EACCC,MAAM,EAAE;AACZ,CAAC;AAED,MAAMC,WAAW,GAAG,YAAkC;EAAA,IAAjCC,KAAK,uEAAGL,YAAY;EAAA,IAAEM,MAAM;EAC7C,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKV,aAAa;MACd,OAAO;QACH,GAAGQ,KAAK;QACRH,SAAS,EAAEI,MAAM,CAACE,OAAO;QACzBP,YAAY,EAAEK,MAAM,CAACE;MACzB,CAAC;IACL;AACR;AACA;AACA;AACA;IACQ,KAAKV,cAAc;MACf,OAAO;QACH,GAAGO,KAAK;QACRF,MAAM,EAAEG,MAAM,CAACE;MACnB,CAAC;IACL,KAAKT,gBAAgB;MACjB,MAAME,YAAY,GAAEI,KAAK,CAACJ,YAAY;MACtC,MAAMQ,iBAAiB,GAAEH,MAAM,CAACE,OAAO,KAAG,KAAK,GAAGP,YAAY,GAAGA,YAAY,CAACS,MAAM,CAACC,IAAI,IAAGA,IAAI,CAACC,SAAS,KAAKN,MAAM,CAACE,OAAO,CAAC;MAC9H,OAAO;QACH,GAAGH,KAAK;QACRH,SAAS,EAAEO;MACf,CAAC;IACF;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAGQ;MACI,OAAO;QAAE,GAAGJ;MAAM,CAAC;EAAC;AAEhC,CAAC;AAED,eAAeD,WAAW"},"metadata":{},"sourceType":"module"}